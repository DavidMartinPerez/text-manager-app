{"version":3,"sources":["reportWebVitals.js","app/TextManager.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","deleteItemByIdFromArray","itemToDelete","array","filter","item","id","TextManager","initialState","useState","optionsList","setOptionsList","prevState","value","ref","useRef","useEffect","current","usePrevious","deleteItemDoubleClick","event","newOptionsList","target","className","data-testid","name","multiple","length","map","text","onDoubleClick","disabled","onClick","window","prompt","Date","getTime","selected","selectMultiple","document","getElementById","arrayOptionsForDelete","i","options","push","arrayOptionsAux","forEach","option","newOptionsListAux","undefined","ReactDOM","render","StrictMode"],"mappings":"2LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCHDQ,EAA0B,SAACC,EAAcC,GAClD,OAAOA,EAAMC,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAaI,OAwF3CC,EAzEK,SAAC,GAA6B,IAAD,IAAzBC,oBAAyB,MAAV,GAAU,IAEPC,mBAASD,GAFF,mBAEtCE,EAFsC,KAEzBC,EAFyB,KAIvCC,EAhBU,SAACC,GACjB,IAAMC,EAAMC,mBAMZ,OAJAC,qBAAU,WACNF,EAAIG,QAAUJ,KAGXC,EAAIG,QASOC,CAAaR,GAUzBS,EAAwB,SAAAC,GAC1B,IAAMC,EAAiBpB,EAAyBmB,EAAME,OAAQZ,GAC9DC,EAAgBU,IAqCpB,OACI,sBAAKE,UAAU,eAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,wBAAQC,cAAY,SAASC,KAAK,iBAAiBnB,GAAG,iBAAiBoB,UAAQ,EAA/E,SAZJhB,EAAYiB,OAAS,EACdjB,EAAYkB,KAAK,YAAqB,IAAjBtB,EAAgB,EAAhBA,GAAIuB,EAAY,EAAZA,KAC5B,OAAO,yBAAQL,cAAY,oBAAoBM,cAAeX,EAAuBb,GAAIA,EAAaO,MAAOgB,EAAtG,cAA8GA,EAA9G,MAA2FvB,MAInG,wBAAQkB,cAAY,kBAAkBlB,GAAG,kBAAkBO,MAAM,WAAWkB,UAAQ,EAApF,4CAUH,sBAAKR,UAAU,wBAAf,UACI,wBAAQC,cAAY,aAAaQ,QAvDjB,WACxB,IAAMH,EAAOI,OAAOC,OAAO,yBAC3B,GAAa,KAATL,GAAwB,OAATA,EAAgB,CAC/B,IAAMvB,EAAE,UAAMuB,EAAN,aAXO,IAAIM,MAAOC,WAY1BzB,EAAe,GAAD,mBAAOD,GAAP,CAAoB,CAAEJ,KAAIuB,OAAMQ,UAAW,QAmDrD,gCACA,wBAAQb,cAAY,gBAAgBQ,QA3Cf,WAI7B,IAHA,IAAMM,EAAiBC,SAASC,eAAgB,kBAC1CC,EAAwB,GAEtBC,EAAIJ,EAAeK,QAAQhB,OAAO,EAAGe,GAAK,EAAGA,IAC7CJ,EAAeK,QAAQD,GAAGL,UAC1BI,EAAsBG,KAAMN,EAAeK,QAAQD,IAI3D,IAAIG,EAAkBnC,EAClB+B,EAAsBd,OAAS,IAC/Bc,EAAsBK,SAAS,SAAEC,GAC7B,IAAMC,EAAoB/C,EAAwB8C,EAAQF,GAC1DA,EAAkBG,KAItBrC,EAAgBkC,KAyBZ,sCACA,wBAAQrB,cAAY,cAAcQ,QAtBvB,kBAAMrB,EAAgBC,IAsB0BmB,cAAwBkB,IAAdrC,EAArE,8CC7EhBsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASC,eAAe,SAM1BhD,M","file":"static/js/main.14c8ced6.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** generate new array within itemToDelete */\r\nexport const deleteItemByIdFromArray = (itemToDelete, array) => {\r\n    return array.filter( item => item.id !== itemToDelete.id );\r\n}\r\n/** custom hook for save previus state */\r\nconst usePrevious = (value) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n\r\n    return ref.current;\r\n}\r\n\r\nconst generateHash = () => new Date().getTime();\r\n\r\nconst TextManager = ( { initialState = [] } ) => {\r\n\r\n    const [optionsList, setOptionsList] = useState(initialState);\r\n\r\n    const prevState = usePrevious( optionsList );\r\n\r\n    const addOptionByTextProp = () => {\r\n        const text = window.prompt('Agrega un nuevo texto');\r\n        if( text !== \"\" && text !== null ) {\r\n            const id = `${text}-${generateHash()}`;\r\n            setOptionsList( [ ...optionsList, { id, text, selected : false } ] );\r\n        }\r\n    }\r\n\r\n    const deleteItemDoubleClick = event => {\r\n        const newOptionsList = deleteItemByIdFromArray( event.target, optionsList );\r\n        setOptionsList( newOptionsList );\r\n    }\r\n\r\n    const deleteOptionsBySelection = () => {\r\n        const selectMultiple = document.getElementById( 'TextListSelect' );\r\n        const arrayOptionsForDelete = [];\r\n\r\n        for(let i = selectMultiple.options.length-1; i >= 0; i--) {\r\n            if( selectMultiple.options[i].selected ) {\r\n                arrayOptionsForDelete.push( selectMultiple.options[i] );\r\n            }\r\n        }\r\n        /** Create array aux for not redering virual dom multiple times  */\r\n        let arrayOptionsAux = optionsList;\r\n        if( arrayOptionsForDelete.length > 0 ) {\r\n            arrayOptionsForDelete.forEach( ( option ) => {\r\n                const newOptionsListAux = deleteItemByIdFromArray(option, arrayOptionsAux);\r\n                arrayOptionsAux = newOptionsListAux;\r\n            });\r\n\r\n            /** Save new array optionList */\r\n            setOptionsList( arrayOptionsAux );\r\n        }\r\n    }\r\n\r\n    const undoLastChange = () => setOptionsList( prevState );\r\n\r\n    const generateOptionsList = () => {\r\n        if( optionsList.length > 0 ) {\r\n            return optionsList.map( ( { id, text } ) => {\r\n                return <option data-testid=\"option_selectable\" onDoubleClick={deleteItemDoubleClick} id={id} key={id} value={text}> {text} </option>\r\n            })\r\n        }\r\n\r\n        return <option data-testid=\"option_disabled\" id=\"option_disabled\" value=\"disabled\" disabled > Agrega un nuevo elemento </option>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"text-manager\">\r\n            <div className=\"text-manager--select\">\r\n                <select data-testid=\"select\" name=\"TextListSelect\" id=\"TextListSelect\" multiple>\r\n                    { generateOptionsList() }\r\n                </select>\r\n            </div>\r\n            <div className=\"text-manager--buttons\">\r\n                <button data-testid=\"button-add\" onClick={addOptionByTextProp}>+ Añadir option</button>\r\n                <button data-testid=\"button-remove\" onClick={deleteOptionsBySelection}>- Eliminar seleccionados</button>\r\n                <button data-testid=\"button-undo\" onClick={undoLastChange} disabled={prevState === undefined}>Deshacer último cambio</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nTextManager.propTypes = {\r\n    initialState: PropTypes.array,\r\n}\r\n\r\nexport default TextManager;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport TextManager from './app/TextManager';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TextManager />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}